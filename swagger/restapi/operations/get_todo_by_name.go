// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "github.com/juliendoutre/go-api-benchmark/swagger/models"
)

// GetTodoByNameHandlerFunc turns a function with the right signature into a get todo by name handler
type GetTodoByNameHandlerFunc func(GetTodoByNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTodoByNameHandlerFunc) Handle(params GetTodoByNameParams) middleware.Responder {
	return fn(params)
}

// GetTodoByNameHandler interface for that can handle valid get todo by name params
type GetTodoByNameHandler interface {
	Handle(GetTodoByNameParams) middleware.Responder
}

// NewGetTodoByName creates a new http.Handler for the get todo by name operation
func NewGetTodoByName(ctx *middleware.Context, handler GetTodoByNameHandler) *GetTodoByName {
	return &GetTodoByName{Context: ctx, Handler: handler}
}

/*GetTodoByName swagger:route GET /todos/{name} getTodoByName

Get a specific todo

*/
type GetTodoByName struct {
	Context *middleware.Context
	Handler GetTodoByNameHandler
}

func (o *GetTodoByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTodoByNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTodoByNameNotFoundBody get todo by name not found body
// swagger:model GetTodoByNameNotFoundBody
type GetTodoByNameNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get todo by name not found body
func (o *GetTodoByNameNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTodoByNameNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getTodoByNameNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTodoByNameNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTodoByNameNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetTodoByNameNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTodoByNameOKBody get todo by name o k body
// swagger:model GetTodoByNameOKBody
type GetTodoByNameOKBody struct {

	// todo
	Todo *models.Todo `json:"todo,omitempty"`
}

// Validate validates this get todo by name o k body
func (o *GetTodoByNameOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTodo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTodoByNameOKBody) validateTodo(formats strfmt.Registry) error {

	if swag.IsZero(o.Todo) { // not required
		return nil
	}

	if o.Todo != nil {
		if err := o.Todo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTodoByNameOK" + "." + "todo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTodoByNameOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTodoByNameOKBody) UnmarshalBinary(b []byte) error {
	var res GetTodoByNameOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
